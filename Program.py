#  Допущение для всех задач: Пользователь вводит адекватные значение 
# (если в условии задачи написано "возводит число A в натуральную степень B", то мы допускаем, 
# что число B на вход мы получим натуральное, а вот А может быть любое, иначе придется использовать слишком много проверок)

# Петя и Катя – брат и сестра. Петя – студент, а Катя – школьница. Петя помогает Кате по математике. 
# Он задумывает два натуральных числа X и Y (X,Y≤1000), а Катя должна их отгадать. 
# Для этого Петя делает две подсказки. Он называет сумму этих чисел S и их произведение P. 
# Помогите Кате отгадать задуманные Петей числа.

# Решение без цикла:
# Шаг 1:
# x * y = a  && x + y = b     -------   x * y = a  &&  x = b - y  
# b*y - y^2 = a && x = b - y  -------   y^2 - b*y + a = 0  &&  x = b - y 
# Выражая корени кравнения через дискриминант имеем
# y1 = (b + sqrt(b*b - 4*a))/2 и y2 = (b - sqrt(b*b - 4*a))/2
# Шаг 2:
# Изходя из условия, видно, что эти корни и есть ответ на задачу, 
# так как от перемены мест слагаемых/множителей сумма/произведение не меняется.
# Тогда 
# x = (b + sqrt(b*b - 4*a))/2
# x = (b - sqrt(b*b - 4*a))/2
# Upd:
# Я не понял, можно ли пользоваться дополнительными библиотеками, поэтому написал отдельно функцию поиска корня.
# Так как изначально корни натуральные, корень можно найти простым перербором натуральных чисел.

# Вопрос: Python при делении автоматически переводит число из int в float и ставит .0 в конце.
# Это можно обойти? Или как удалить этот .0?


def sqrt(x):
    res = 0
    while res * res != x:
        res += 1
    return res


sum = int(input("Input sum: "))
prod = int(input("Input product: "))

print(f"x = {(sum - sqrt(sum*sum - 4*prod))/2}, y = {(sum + sqrt(sum*sum - 4*prod))/2}")
